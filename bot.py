import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup
import aiohttp
import asyncio
from datetime import datetime, timedelta
import os
import json
from dotenv import load_dotenv
from itertools import zip_longest
from textwrap import fill
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import CallbackQuery

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
API_TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not API_TOKEN:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–µ")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –î–∞–ª–µ–µ –∏–¥–µ—Ç –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥...
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–ª–æ–≤–∞—Ä—å —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ –∏—Ö —Å—Å—ã–ª–∫–∞–º–∏
groups = {}
teachers = {}

with open('groups.json', encoding='utf-8') as f:
    groups = json.load(f)

with open('teachers.json', encoding='utf-8') as f:
    teachers = json.load(f)

default_times = {
    "1": "8:30-10:00",
    "2": "10:10-11:40",
    "3": "12:10-13:40",
    "4": "13:50-15:20",
    "5": "15:30-17:00",
    "6": "17:10-18:40"
}

monday_times = {
    "1": "8:30-9:00",
    "2": "9:10-10:30",
    "3": "10:40-12:00",
    "4": "12:20-13:40",
    "5": "13:50-15:10",
    "6": "16:00-17:20",
    "7": "17:30-18:50"
}
# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule_cache = {}

def get_weekday_name(offset=0):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–ø–Ω', '–≤—Ç' –∏ —Ç.–¥. —Å —É—á—ë—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è –¥–Ω–µ–π"""
    days = ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"]
    today = datetime.now() + timedelta(days=offset)
    return days[today.weekday()]

def split_schedule(schedule_text, max_length=4096):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_length —Å–∏–º–≤–æ–ª–æ–≤.
    """
    parts = []
    while len(schedule_text) > max_length:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –¥–æ max_length
        split_index = schedule_text.rfind('\n', 0, max_length)
        if split_index == -1:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∏–º –ø–æ max_length
            split_index = max_length
        parts.append(schedule_text[:split_index])
        schedule_text = schedule_text[split_index:].lstrip()
    parts.append(schedule_text)
    return parts

async def get_schedule(group_url):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –æ–Ω–∏
    if group_url in schedule_cache:
        cached_data = schedule_cache[group_url]
        if datetime.now() - cached_data['timestamp'] < timedelta(minutes=5):
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_url}")
            return cached_data['schedule']

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(group_url) as response:
                if response.status == 200:
                    html = await response.text(encoding='windows-1251')
                    soup = BeautifulSoup(html, 'html.parser')

                    tables = soup.find_all('table')
                    if not tables:
                        logger.warning("–¢–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                        return []

                    schedule = []
                    current_date = None

                    for table in tables:
                        rows = table.find_all('tr')
                        for row in rows[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                            cells = row.find_all('td')

                            if not cells:
                                continue

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                            is_header = any(
                                cell.text.strip() in ["–î–µ–Ω—å", "–ü–∞—Ä–∞", "&nbsp;"]
                                for cell in cells
                            )
                            if is_header:
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

                            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                            if len(cells) >= 1 and cells[0].get('rowspan'):
                                current_date = cells[0].text.strip().replace('\n', ' ')
                                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {current_date}")

                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –∏ —è—á–µ–π–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏
                            pair_number = None
                            details_cell = None
                            
                            if len(cells) >= 3:  # –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
                                pair_number = cells[1].text.strip()
                                details_cell = cells[2]
                            elif len(cells) >= 2:  # –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                                pair_number = cells[0].text.strip()
                                details_cell = cells[1]
                            
                            if not pair_number or not details_cell or not details_cell.text.strip():
                                continue

                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–µ
                            subject = details_cell.find('a', class_='z1')
                            classroom = details_cell.find('a', class_='z2')
                            teacher = details_cell.find('a', class_='z3')

                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—ã
                            is_monday = current_date and ("–ü–Ω" in current_date or "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in current_date.lower())
                            time_table = monday_times if is_monday else default_times
                            pair_time = time_table.get(pair_number, "‚Äî")

                            schedule.append({
                                'date': current_date,
                                'pair_number': pair_number,
                                'pair_time': pair_time,
                                'subject': subject.text.strip() if subject else "–ù–µ—Ç –ø–∞—Ä—ã",
                                'classroom': classroom.text.strip() if classroom else "‚Äî",
                                'teacher': teacher.text.strip() if teacher else "‚Äî"
                            })

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫—ç—à–µ
                    schedule_cache[group_url] = {
                        'schedule': schedule,
                        'timestamp': datetime.now()
                    }

                    logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è {group_url}")
                    return schedule
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_schedule: {e}")
        return []

@dp.message(Command("remove"))
async def remove_keyboard(message: Message):
    await message.answer(
        "–°—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞",
        reply_markup=ReplyKeyboardRemove()
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="help_command")],
        [InlineKeyboardButton(text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", callback_data="select_day")],
        [InlineKeyboardButton(text="üè´ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", callback_data="groups_list")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", callback_data="teachers_list")]
    ])
    
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ /schedule
@dp.message(Command("schedule"))
async def send_schedule(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        group_name = message.text.split()[1]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}.")

        # –ò—â–µ–º –≥—Ä—É–ø–ø—É –≤ —Å–ª–æ–≤–∞—Ä–µ
        if group_name in groups:
            group_url = groups[group_name]
            schedule = await get_schedule(group_url)

            if schedule:
                response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:\n"
                current_date = None

                for entry in schedule:
                    if entry['date'] != current_date:
                        response += f"\nüìÖ <b>{entry['date']}</b>\n"
                        current_date = entry['date']
                    response += f"  üïí –ü–∞—Ä–∞ {entry['pair_number']} ({entry['pair_time']}):\n"
                    response += f"      üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {entry['subject']}\n"
                    response += f"      üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry['classroom']}\n"
                    response += f"      üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {entry['teacher']}\n\n"

                # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                schedule_parts = split_schedule(response)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                for part in schedule_parts:
                    await message.reply(part)

                logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}.")
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}.")
        else:
            await message.reply("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
            logger.warning(f"–ì—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ.")
    except IndexError:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /schedule <–≥—Ä—É–ø–ø–∞>")
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /schedule –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã.")
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /schedule: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /teacher
@dp.message(Command("teacher"))
async def send_teacher_schedule(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        teacher_name = " ".join(message.text.split()[1:])
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}.")

        # –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
        if teacher_name in teachers:
            teacher_url = teachers[teacher_name]
            schedule = await get_schedule(teacher_url)

            if schedule:
                response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}:\n"
                current_date = None

                for entry in schedule:
                    if entry['date'] != current_date:
                        response += f"\nüìÖ <b>{entry['date']}</b>\n"
                        current_date = entry['date']
                    response += f"  üïí –ü–∞—Ä–∞ {entry['pair_number']} ({entry['pair_time']})\n"
                    response += f"      üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {entry['teacher']}\n"
                    response += f"      üë• –ì—Ä—É–ø–ø–∞: {entry['subject']}\n"
                    response += f"      üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry['classroom']}\n\n"

                # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                schedule_parts = split_schedule(response)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                for part in schedule_parts:
                    await message.reply(part)

                logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}.")
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}.")
        else:
            await message.reply("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")
            logger.warning(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {teacher_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ.")
    except IndexError:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /teacher <–∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è>")
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /teacher –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /teacher: {e}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (help, teachers, groups) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def send_help(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.")
    help_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        "üîπ /schedule [–≥—Ä—É–ø–ø–∞] - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "üîπ /teacher [–§–ò–û] - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
        "üîπ /day [–≥—Ä—É–ø–ø–∞/–§–ò–û] [–¥–µ–Ω—å] - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å\n\n"
        "üìã <b>–°–ø–∏—Å–∫–∏:</b>\n"
        "üîπ /groups - –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n"
        "üîπ /teachers - –í—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏\n\n"
        "üìå <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>/schedule –°–û–î23-1</code>\n"
        "<code>/teacher –í–æ–ª–æ—à–∏–Ω –†.–ù.</code>\n"
        "<code>/day –ò–°–ø21-2–ö –ø–Ω</code>\n"
        "<code>/day –ì—Ä–∏–≥–æ—Ä—è–Ω –ù.–ê. —Å—Ä–µ–¥–∞</code>"
    )
    await message.reply(help_text, parse_mode=ParseMode.HTML)

# –ö–æ–º–∞–Ω–¥–∞ /groups
@dp.message(Command("groups"))
async def send_groups(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    group_buttons = []
    for group in sorted(groups.keys()):
        group_buttons.append(InlineKeyboardButton(text=group, callback_data=f"group_{group}"))
        if len(group_buttons) == 3:
            keyboard.inline_keyboard.append(group_buttons)
            group_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    if group_buttons:
        keyboard.inline_keyboard.append(group_buttons)
    
    await message.reply("üè´ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /teachers
@dp.message(Command("teachers"))
async def send_teachers(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ (—Ç–∞–∫ –∫–∞–∫ –§–ò–û –¥–ª–∏–Ω–Ω—ã–µ)
    teacher_buttons = []
    for teacher in sorted(teachers.keys()):
        teacher_buttons.append(InlineKeyboardButton(text=teacher, callback_data=f"teacher_{teacher}"))
        if len(teacher_buttons) == 2:
            keyboard.inline_keyboard.append(teacher_buttons)
            teacher_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    if teacher_buttons:
        keyboard.inline_keyboard.append(teacher_buttons)
    
    await message.reply("üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
user_state = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}

@dp.callback_query(lambda c: c.data == "select_day")
async def select_day(callback: CallbackQuery):
    try:
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for i in range(0, len(days), 2):
            row = days[i:i+2]
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=day, callback_data=f"day_{day.lower()}") 
                for day in row
            ])
        
        await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_day: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(lambda c: c.data.startswith("day_") and len(c.data.split("_")) == 2)
async def day_selected(callback: CallbackQuery):
    try:
        day = callback.data.split("_")[1]
        user_state[callback.from_user.id] = {"day": day}
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –¥–µ–Ω—å: {day}")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè´ –ì—Ä—É–ø–ø—ã", callback_data=f"day_category_groups")],
            [InlineKeyboardButton(text="üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", callback_data=f"day_category_teachers")]
        ])
        
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {day.capitalize()}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ day_selected: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(lambda c: c.data.startswith("day_category_"))
async def show_category_options(callback: CallbackQuery):
    try:
        parts = callback.data.split("_")
        if len(parts) < 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        category = parts[2]  # groups –∏–ª–∏ teachers
        day = user_state.get(callback.from_user.id, {}).get("day", "")
        
        if not day:
            await callback.answer("‚ùå –î–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
            return
        
        if category == "groups":
            items = sorted(groups.keys())
            text = "üè´ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
            prefix = "group"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø (—É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–∏—Å—ã)
            def process_item(item):
                return item.replace("-", "")
                
        else:
            items = sorted(teachers.keys())
            text = "üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"
            prefix = "teacher"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (—Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á)
            def process_item(item):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∏–º–µ–Ω
                return str(hash(item))[:16]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        name_mapping = {}
        
        for i in range(0, len(items), 2):
            row = items[i:i+2]
            buttons = []
            for item in row:
                safe_key = process_item(item)
                name_mapping[safe_key] = item  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                callback_data = f"day_final_{prefix}_{day}_{safe_key}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É callback_data
                if len(callback_data.encode('utf-8')) > 64:
                    callback_data = f"day_{prefix}_{day[:3]}_{safe_key[:8]}"
                
                buttons.append(InlineKeyboardButton(
                    text=item, 
                    callback_data=callback_data
                ))
            keyboard.inline_keyboard.append(buttons)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º mapping –≤ user_state
        user_state[callback.from_user.id]["name_mapping"] = name_mapping
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_category_options: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("day_final_"))
async def show_final_schedule(callback: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        parts = callback.data.split('_')
        if len(parts) < 4:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        entity_type = parts[2]  # 'group' –∏–ª–∏ 'teacher'
        day = parts[3]
        safe_key = '_'.join(parts[4:])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω
        name_mapping = user_state.get(callback.from_user.id, {}).get("name_mapping", {})
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
        if entity_type == 'teacher':
            # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            original_name = name_mapping.get(safe_key)
            if not original_name:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                original_name = next(
                    (k for k in teachers.keys() 
                     if k.replace(".", "").replace("-", "").replace(" ", "_").lower() == safe_key.lower()),
                    None
                )
            
            if not original_name:
                logger.error(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {safe_key}")
                await callback.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
                
            url = teachers[original_name]
        else:
            # –î–ª—è –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (–±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤)
            original_name = next(
                (k for k in groups.keys() 
                 if k.replace("-", "").lower() == safe_key.lower()),
                None
            )
            if not original_name:
                await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            url = groups[original_name]
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {original_name}")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = await get_schedule(url)
        if not schedule:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            await callback.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–Ω—é
        day_variants = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': ['–ø–Ω', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'],
            '–≤—Ç–æ—Ä–Ω–∏–∫': ['–≤—Ç', '–≤—Ç–æ—Ä–Ω–∏–∫'],
            '—Å—Ä–µ–¥–∞': ['—Å—Ä', '—Å—Ä–µ–¥–∞'],
            '—á–µ—Ç–≤–µ—Ä–≥': ['—á—Ç', '—á–µ—Ç–≤–µ—Ä–≥'],
            '–ø—è—Ç–Ω–∏—Ü–∞': ['–ø—Ç', '–ø—è—Ç–Ω–∏—Ü–∞'],
            '—Å—É–±–±–æ—Ç–∞': ['—Å–±', '—Å—É–±–±–æ—Ç–∞']
        }.get(day, [])
        
        filtered = []
        for entry in schedule:
            if not entry.get('date'):
                continue
                
            entry_day = entry['date'].lower()
            if any(variant in entry_day for variant in day_variants):
                filtered.append(entry)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if not filtered:
            response = f"üìÖ –£ {original_name} –Ω–µ—Ç –ø–∞—Ä –≤ {day.capitalize()}"
        else:
            response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {original_name} –Ω–∞ {day.capitalize()}:\n\n"
            for entry in filtered:
                response += f"  üïí –ü–∞—Ä–∞ {entry.get('pair_number', '?')} ({entry.get('pair_time', '')})\n"
                if entity_type == 'group':
                    response += f"      üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {entry.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    response += f"      üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry.get('classroom', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    response += f"      üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {entry.get('teacher', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                else:
                    response += f"      üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {entry.get('teacher', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    response += f"      üë• –ì—Ä—É–ø–ø–∞: {entry.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    response += f"      üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry.get('classroom', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.edit_text(response, reply_markup=None)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_final_schedule: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def process_callback(callback: types.CallbackQuery):
    try:
        data = callback.data
        
        if data == "help_command":
            help_text = (
                "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
                "üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
                "üîπ /schedule [–≥—Ä—É–ø–ø–∞] - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
                "üîπ /teacher [–§–ò–û] - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
                "üîπ /day [–≥—Ä—É–ø–ø–∞/–§–ò–û] [–¥–µ–Ω—å] - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å\n\n"
                "üìã <b>–°–ø–∏—Å–∫–∏:</b>\n"
                "üîπ /groups - –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n"
                "üîπ /teachers - –í—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏\n\n"
                "üìå <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "<code>/schedule –°–û–î23-1</code>\n"
                "<code>/teacher –í–æ–ª–æ—à–∏–Ω –†.–ù.</code>\n"
                "<code>/day –ò–°–ø21-2–ö –ø–Ω</code>\n"
                "<code>/day –ì—Ä–∏–≥–æ—Ä—è–Ω –ù.–ê. —Å—Ä–µ–¥–∞</code>"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            current_text = callback.message.text or callback.message.caption or ""
            if (current_text.strip() != help_text.strip() or 
                callback.message.reply_markup is not None):
                await callback.message.edit_text(
                    help_text, 
                    parse_mode=ParseMode.HTML,
                    reply_markup=None
                )
            else:
                await callback.answer("–í—ã —É–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Å–ø—Ä–∞–≤–∫—É")
            
        elif data == "groups_list":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
            if "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É" not in (callback.message.text or ""):
                keyboard = InlineKeyboardMarkup(inline_keyboard=[])
                group_buttons = []
                for group in sorted(groups.keys()):
                    group_buttons.append(InlineKeyboardButton(text=group, callback_data=f"group_{group}"))
                    if len(group_buttons) == 3:
                        keyboard.inline_keyboard.append(group_buttons)
                        group_buttons = []
                
                if group_buttons:
                    keyboard.inline_keyboard.append(group_buttons)
                
                await callback.message.edit_text("üè´ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
            else:
                await callback.answer("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
        
        elif data == "teachers_list":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            if "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" not in (callback.message.text or ""):
                keyboard = InlineKeyboardMarkup(inline_keyboard=[])
                teacher_buttons = []
                for teacher in sorted(teachers.keys()):
                    teacher_buttons.append(InlineKeyboardButton(text=teacher, callback_data=f"teacher_{teacher}"))
                    if len(teacher_buttons) == 2:
                        keyboard.inline_keyboard.append(teacher_buttons)
                        teacher_buttons = []
                
                if teacher_buttons:
                    keyboard.inline_keyboard.append(teacher_buttons)
                
                await callback.message.edit_text("üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
            else:
                await callback.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
        
        elif data.startswith("group_"):
            group_name = data[6:]
            if group_name in groups:
                group_url = groups[group_name]
                schedule = await get_schedule(group_url)
                
                if schedule:
                    response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:\n"
                    current_date = None

                    for entry in schedule:
                        if entry['date'] != current_date:
                            response += f"\nüìÖ <b>{entry['date']}</b>\n"
                            current_date = entry['date']
                        response += f"  üïí –ü–∞—Ä–∞ {entry['pair_number']} ({entry['pair_time']})\n"
                        response += f"      üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {entry['subject']}\n"
                        response += f"      üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry['classroom']}\n"
                        response += f"      üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {entry['teacher']}\n\n"

                    schedule_parts = split_schedule(response)
                    await callback.message.edit_reply_markup(reply_markup=None)
                    await callback.message.answer(schedule_parts[0])

                    for part in schedule_parts[1:]:
                        await callback.message.answer(part)
                else:
                    await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", show_alert=True)
            else:
                await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        
        elif data.startswith("teacher_"):
            teacher_name = data[8:]
            if teacher_name in teachers:
                teacher_url = teachers[teacher_name]
                schedule = await get_schedule(teacher_url)
                
                if schedule:
                    response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}:\n"
                    current_date = None

                    for entry in schedule:
                        if entry['date'] != current_date:
                            response += f"\nüìÖ <b>{entry['date']}</b>\n"
                            current_date = entry['date']
                        response += f"  üïí –ü–∞—Ä–∞ {entry['pair_number']} ({entry['pair_time']})\n"
                        response += f"      üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {entry['teacher']}\n"
                        response += f"      üë• –ì—Ä—É–ø–ø–∞: {entry['subject']}\n"
                        response += f"      üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry['classroom']}\n\n"

                    schedule_parts = split_schedule(response)
                    await callback.message.edit_reply_markup(reply_markup=None)
                    await callback.message.answer(schedule_parts[0])

                    for part in schedule_parts[1:]:
                        await callback.message.answer(part)
                else:
                    await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", show_alert=True)
            else:
                await callback.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        
        await callback.answer()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


# –î–æ–±–∞–≤–∏–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ (–ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥)

@dp.message(Command("day"))
async def day_schedule(message: Message):
    try:
        args = message.text.split()
        if len(args) < 3:
            await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –§–æ—Ä–º–∞—Ç: /day <–≥—Ä—É–ø–ø–∞/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å> <–¥–µ–Ω—å>")
            return

        target = " ".join(args[1:-1])  # –î–ª—è –§–ò–û —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        day_name = args[-1].lower()

        weekdays = {
            "–ø–Ω": ["–ø–Ω", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"],
            "–≤—Ç": ["–≤—Ç", "–≤—Ç–æ—Ä–Ω–∏–∫"],
            "—Å—Ä": ["—Å—Ä", "—Å—Ä–µ–¥–∞"],
            "—á—Ç": ["—á—Ç", "—á–µ—Ç–≤–µ—Ä–≥"],
            "–ø—Ç": ["–ø—Ç", "–ø—è—Ç–Ω–∏—Ü–∞"],
            "—Å–±": ["—Å–±", "—Å—É–±–±–æ—Ç–∞"],
            "–≤—Å": ["–≤—Å", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å
        day_found = None
        for day_key, day_variants in weekdays.items():
            if day_name in day_variants:
                day_found = day_key
                break

        if not day_found:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±, –≤—Å")
            return

        # –ò—â–µ–º —Ü–µ–ª—å (–≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
        url = None
        response_title = ""
        if target in groups:
            url = groups[target]
            response_title = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {target} –Ω–∞ {day_name}:\n"
        elif target in teachers:
            url = teachers[target]
            response_title = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {target} –Ω–∞ {day_name}:\n"
        else:
            await message.reply("‚ùå –ì—Ä—É–ø–ø–∞ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        schedule = await get_schedule(url)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {len(schedule)} –∑–∞–ø–∏—Å–µ–π")  # –õ–æ–≥–∏—Ä—É–µ–º

        if not schedule:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–Ω—é
        filtered = []
        for entry in schedule:
            entry_day = entry['date'].lower()
            if any(day in entry_day for day in weekdays[day_found]):
                filtered.append(entry)

        if not filtered:
            await message.reply(f"‚ÑπÔ∏è –ü–∞—Ä –≤ {day_name} –Ω–µ—Ç")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = response_title
        current_date = None

        for entry in filtered:
            if entry['date'] != current_date:
                response += f"\nüìÖ <b>{entry['date']}</b>\n"
                current_date = entry['date']

            response += f"  üïí –ü–∞—Ä–∞ {entry['pair_number']} ({entry['pair_time']})\n"
    
            if target in groups:
                response += f"      üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {entry['subject']}\n"
                response += f"      üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry['classroom']}\n"
                response += f"      üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {entry['teacher']}\n\n"
            else:
                response += f"      üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {entry['teacher']}\n"
                response += f"      üë• –ì—Ä—É–ø–ø–∞: {entry['subject']}\n"
                response += f"      üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry['classroom']}\n\n"

        await message.reply(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /day: {str(e)}", exc_info=True)
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def handle_unknown_command(message: Message):
    await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())